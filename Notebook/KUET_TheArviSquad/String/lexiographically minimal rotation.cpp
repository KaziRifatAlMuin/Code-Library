/*
A rotation of a string can be generated by moving characters 
one after another from beginning to end. For example, the rotations of
acab are acab, caba, abac, and baca.
*/
// findLCP use trie
char compare(hashNode &node, int i, int j, int x, int y) {
    int lcp = findLCP(node, i, j, x, y);
    int len1 = j - i  + 1, len2 = y - x + 1;
    if(len1 == len2 && lcp == len1) return 'e';
    else if(len1 == lcp) return 's';
    else if(len2 == lcp) return 'b';
    else return (node.str[i + lcp] < node.str[x + lcp]) ? 's' : 'b';
}
void solve() {
    string str;
    cin >> str;
    int n = str.size();
    str += str;
    hashNode node(str);
    int l = 0, r = n - 1;
    for(int i = 0; i < n; i++) {
        char x = compare(node, l, r, i, i + n - 1);
        if(x == 'b') {
            l = i, r = i + n - 1;
        }
    }
    cout << str.substr(l, n) << "\n";
}   